// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: grpc.proto

package grpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{0}
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pass       string `protobuf:"bytes,3,opt,name=pass,proto3" json:"pass,omitempty"`
	Auth       int32  `protobuf:"varint,4,opt,name=auth,proto3" json:"auth,omitempty"`
	Admingroup string `protobuf:"bytes,5,opt,name=admingroup,proto3" json:"admingroup,omitempty"`
	Usergroup  string `protobuf:"bytes,6,opt,name=usergroup,proto3" json:"usergroup,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *UserData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserData) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *UserData) GetAuth() int32 {
	if x != nil {
		return x.Auth
	}
	return 0
}

func (x *UserData) GetAdmingroup() string {
	if x != nil {
		return x.Admingroup
	}
	return ""
}

func (x *UserData) GetUsergroup() string {
	if x != nil {
		return x.Usergroup
	}
	return ""
}

//Token Result
//data1: Token data2: UserName
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Info   string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Data1  string `protobuf:"bytes,3,opt,name=data1,proto3" json:"data1,omitempty"`
	Data2  string `protobuf:"bytes,4,opt,name=data2,proto3" json:"data2,omitempty"`
	Data3  string `protobuf:"bytes,5,opt,name=data3,proto3" json:"data3,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{2}
}

func (x *Result) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Result) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Result) GetData1() string {
	if x != nil {
		return x.Data1
	}
	return ""
}

func (x *Result) GetData2() string {
	if x != nil {
		return x.Data2
	}
	return ""
}

func (x *Result) GetData3() string {
	if x != nil {
		return x.Data3
	}
	return ""
}

type TokenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Userid    int32  `protobuf:"varint,3,opt,name=userid,proto3" json:"userid,omitempty"`
	Begintime int64  `protobuf:"varint,4,opt,name=begintime,proto3" json:"begintime,omitempty"`
	Endtime   int64  `protobuf:"varint,5,opt,name=endtime,proto3" json:"endtime,omitempty"`
}

func (x *TokenData) Reset() {
	*x = TokenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenData) ProtoMessage() {}

func (x *TokenData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenData.ProtoReflect.Descriptor instead.
func (*TokenData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{3}
}

func (x *TokenData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TokenData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenData) GetUserid() int32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *TokenData) GetBegintime() int64 {
	if x != nil {
		return x.Begintime
	}
	return 0
}

func (x *TokenData) GetEndtime() int64 {
	if x != nil {
		return x.Endtime
	}
	return 0
}

//Add : mode0 <- Administrator | mode1 <- User | mode2 <- Team
//Get : mode0 <-All | mode1 <- Select | mode2 <- MyGroup
//Join: mode0 <- Admin | mode1 <- User
type GroupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Admin string    `protobuf:"bytes,3,opt,name=admin,proto3" json:"admin,omitempty"`
	User  string    `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Mode  int32     `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"`
	Sepc  *SpecData `protobuf:"bytes,6,opt,name=sepc,proto3" json:"sepc,omitempty"`
}

func (x *GroupData) Reset() {
	*x = GroupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupData) ProtoMessage() {}

func (x *GroupData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupData.ProtoReflect.Descriptor instead.
func (*GroupData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{4}
}

func (x *GroupData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupData) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *GroupData) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *GroupData) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *GroupData) GetSepc() *SpecData {
	if x != nil {
		return x.Sepc
	}
	return nil
}

type SpecData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vm      int32  `protobuf:"varint,1,opt,name=vm,proto3" json:"vm,omitempty"`
	Cpu     int32  `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Mem     int32  `protobuf:"varint,3,opt,name=mem,proto3" json:"mem,omitempty"`
	Storage int64  `protobuf:"varint,4,opt,name=storage,proto3" json:"storage,omitempty"`
	Net     string `protobuf:"bytes,5,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *SpecData) Reset() {
	*x = SpecData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecData) ProtoMessage() {}

func (x *SpecData) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecData.ProtoReflect.Descriptor instead.
func (*SpecData) Descriptor() ([]byte, []int) {
	return file_grpc_proto_rawDescGZIP(), []int{5}
}

func (x *SpecData) GetVm() int32 {
	if x != nil {
		return x.Vm
	}
	return 0
}

func (x *SpecData) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *SpecData) GetMem() int32 {
	if x != nil {
		return x.Mem
	}
	return 0
}

func (x *SpecData) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *SpecData) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

var File_grpc_proto protoreflect.FileDescriptor

var file_grpc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04,
	0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x76, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x33, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x65, 0x70, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x73, 0x65, 0x70, 0x63, 0x22, 0x6a, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x76, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e,
	0x65, 0x74, 0x32, 0x88, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x05, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x05, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x1a, 0x0a, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x1f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x22,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12, 0x05, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x1a, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x21, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x24, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0a, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x05, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x0a, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_rawDescOnce sync.Once
	file_grpc_proto_rawDescData = file_grpc_proto_rawDesc
)

func file_grpc_proto_rawDescGZIP() []byte {
	file_grpc_proto_rawDescOnce.Do(func() {
		file_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_rawDescData)
	})
	return file_grpc_proto_rawDescData
}

var file_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_grpc_proto_goTypes = []interface{}{
	(*Null)(nil),      // 0: Null
	(*UserData)(nil),  // 1: UserData
	(*Result)(nil),    // 2: Result
	(*TokenData)(nil), // 3: TokenData
	(*GroupData)(nil), // 4: GroupData
	(*SpecData)(nil),  // 5: SpecData
}
var file_grpc_proto_depIdxs = []int32{
	5,  // 0: GroupData.sepc:type_name -> SpecData
	1,  // 1: Controller.GenerateToken:input_type -> UserData
	0,  // 2: Controller.DeleteToken:input_type -> Null
	3,  // 3: Controller.GetToken:input_type -> TokenData
	0,  // 4: Controller.GetAllToken:input_type -> Null
	1,  // 5: Controller.AddUser:input_type -> UserData
	1,  // 6: Controller.UpdateUser:input_type -> UserData
	1,  // 7: Controller.DeleteUser:input_type -> UserData
	1,  // 8: Controller.GetUser:input_type -> UserData
	0,  // 9: Controller.GetAllUser:input_type -> Null
	4,  // 10: Controller.AddGroup:input_type -> GroupData
	4,  // 11: Controller.UpdateGroup:input_type -> GroupData
	4,  // 12: Controller.DeleteGroup:input_type -> GroupData
	4,  // 13: Controller.GetGroup:input_type -> GroupData
	0,  // 14: Controller.GetAllGroup:input_type -> Null
	2,  // 15: Controller.GenerateToken:output_type -> Result
	2,  // 16: Controller.DeleteToken:output_type -> Result
	2,  // 17: Controller.GetToken:output_type -> Result
	3,  // 18: Controller.GetAllToken:output_type -> TokenData
	2,  // 19: Controller.AddUser:output_type -> Result
	2,  // 20: Controller.UpdateUser:output_type -> Result
	2,  // 21: Controller.DeleteUser:output_type -> Result
	1,  // 22: Controller.GetUser:output_type -> UserData
	1,  // 23: Controller.GetAllUser:output_type -> UserData
	2,  // 24: Controller.AddGroup:output_type -> Result
	2,  // 25: Controller.UpdateGroup:output_type -> Result
	2,  // 26: Controller.DeleteGroup:output_type -> Result
	4,  // 27: Controller.GetGroup:output_type -> GroupData
	4,  // 28: Controller.GetAllGroup:output_type -> GroupData
	15, // [15:29] is the sub-list for method output_type
	1,  // [1:15] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_grpc_proto_init() }
func file_grpc_proto_init() {
	if File_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_goTypes,
		DependencyIndexes: file_grpc_proto_depIdxs,
		MessageInfos:      file_grpc_proto_msgTypes,
	}.Build()
	File_grpc_proto = out.File
	file_grpc_proto_rawDesc = nil
	file_grpc_proto_goTypes = nil
	file_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	GenerateToken(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	DeleteToken(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error)
	GetToken(ctx context.Context, in *TokenData, opts ...grpc.CallOption) (*Result, error)
	GetAllToken(ctx context.Context, in *Null, opts ...grpc.CallOption) (Controller_GetAllTokenClient, error)
	AddUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	UpdateUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	DeleteUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error)
	GetUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error)
	GetAllUser(ctx context.Context, in *Null, opts ...grpc.CallOption) (Controller_GetAllUserClient, error)
	AddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	UpdateGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	DeleteGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error)
	GetGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*GroupData, error)
	GetAllGroup(ctx context.Context, in *Null, opts ...grpc.CallOption) (Controller_GetAllGroupClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GenerateToken(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteToken(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetToken(ctx context.Context, in *TokenData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetAllToken(ctx context.Context, in *Null, opts ...grpc.CallOption) (Controller_GetAllTokenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/Controller/GetAllToken", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetAllTokenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetAllTokenClient interface {
	Recv() (*TokenData, error)
	grpc.ClientStream
}

type controllerGetAllTokenClient struct {
	grpc.ClientStream
}

func (x *controllerGetAllTokenClient) Recv() (*TokenData, error) {
	m := new(TokenData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) AddUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UpdateUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/Controller/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetAllUser(ctx context.Context, in *Null, opts ...grpc.CallOption) (Controller_GetAllUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[1], "/Controller/GetAllUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetAllUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetAllUserClient interface {
	Recv() (*UserData, error)
	grpc.ClientStream
}

type controllerGetAllUserClient struct {
	grpc.ClientStream
}

func (x *controllerGetAllUserClient) Recv() (*UserData, error) {
	m := new(UserData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) AddGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) UpdateGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Controller/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetGroup(ctx context.Context, in *GroupData, opts ...grpc.CallOption) (*GroupData, error) {
	out := new(GroupData)
	err := c.cc.Invoke(ctx, "/Controller/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetAllGroup(ctx context.Context, in *Null, opts ...grpc.CallOption) (Controller_GetAllGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[2], "/Controller/GetAllGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetAllGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetAllGroupClient interface {
	Recv() (*GroupData, error)
	grpc.ClientStream
}

type controllerGetAllGroupClient struct {
	grpc.ClientStream
}

func (x *controllerGetAllGroupClient) Recv() (*GroupData, error) {
	m := new(GroupData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	GenerateToken(context.Context, *UserData) (*Result, error)
	DeleteToken(context.Context, *Null) (*Result, error)
	GetToken(context.Context, *TokenData) (*Result, error)
	GetAllToken(*Null, Controller_GetAllTokenServer) error
	AddUser(context.Context, *UserData) (*Result, error)
	UpdateUser(context.Context, *UserData) (*Result, error)
	DeleteUser(context.Context, *UserData) (*Result, error)
	GetUser(context.Context, *UserData) (*UserData, error)
	GetAllUser(*Null, Controller_GetAllUserServer) error
	AddGroup(context.Context, *GroupData) (*Result, error)
	UpdateGroup(context.Context, *GroupData) (*Result, error)
	DeleteGroup(context.Context, *GroupData) (*Result, error)
	GetGroup(context.Context, *GroupData) (*GroupData, error)
	GetAllGroup(*Null, Controller_GetAllGroupServer) error
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) GenerateToken(context.Context, *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (*UnimplementedControllerServer) DeleteToken(context.Context, *Null) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedControllerServer) GetToken(context.Context, *TokenData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedControllerServer) GetAllToken(*Null, Controller_GetAllTokenServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllToken not implemented")
}
func (*UnimplementedControllerServer) AddUser(context.Context, *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedControllerServer) UpdateUser(context.Context, *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedControllerServer) DeleteUser(context.Context, *UserData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedControllerServer) GetUser(context.Context, *UserData) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedControllerServer) GetAllUser(*Null, Controller_GetAllUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (*UnimplementedControllerServer) AddGroup(context.Context, *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (*UnimplementedControllerServer) UpdateGroup(context.Context, *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedControllerServer) DeleteGroup(context.Context, *GroupData) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedControllerServer) GetGroup(context.Context, *GroupData) (*GroupData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedControllerServer) GetAllGroup(*Null, Controller_GetAllGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllGroup not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GenerateToken(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteToken(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetToken(ctx, req.(*TokenData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetAllToken_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetAllToken(m, &controllerGetAllTokenServer{stream})
}

type Controller_GetAllTokenServer interface {
	Send(*TokenData) error
	grpc.ServerStream
}

type controllerGetAllTokenServer struct {
	grpc.ServerStream
}

func (x *controllerGetAllTokenServer) Send(m *TokenData) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UpdateUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetAllUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetAllUser(m, &controllerGetAllUserServer{stream})
}

type Controller_GetAllUserServer interface {
	Send(*UserData) error
	grpc.ServerStream
}

type controllerGetAllUserServer struct {
	grpc.ServerStream
}

func (x *controllerGetAllUserServer) Send(m *UserData) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).UpdateGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Controller/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetGroup(ctx, req.(*GroupData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetAllGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetAllGroup(m, &controllerGetAllGroupServer{stream})
}

type Controller_GetAllGroupServer interface {
	Send(*GroupData) error
	grpc.ServerStream
}

type controllerGetAllGroupServer struct {
	grpc.ServerStream
}

func (x *controllerGetAllGroupServer) Send(m *GroupData) error {
	return x.ServerStream.SendMsg(m)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _Controller_GenerateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Controller_DeleteToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Controller_GetToken_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _Controller_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Controller_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Controller_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Controller_GetUser_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _Controller_AddGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Controller_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Controller_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Controller_GetGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllToken",
			Handler:       _Controller_GetAllToken_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllUser",
			Handler:       _Controller_GetAllUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllGroup",
			Handler:       _Controller_GetAllGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
